вот весь код моего проекта:

app.py:
# Импорт библиотек
from flask import Flask, redirect, url_for, session, render_template, request, flash, abort
from flask_socketio import SocketIO, emit
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
import sqlite3
import os
import logging
import time

# Конфигурация приложения
app = Flask(__name__)
app.secret_key = os.urandom(24)
app.config.update(
    UPLOAD_FOLDER_PROFILE='static/img/profile',
    UPLOAD_FOLDER_ACHIEVEMENTS='static/img/achievements',
    UPLOAD_FOLDER_STUDENTS_ACHIEVEMENTS='static/img/students_achievements',
    DATABASE='database.db',
    ALLOWED_EXTENSIONS={'png', 'jpg', 'jpeg'},
    MAX_CONTENT_LENGTH=20 * 1024 * 1024,  # 20 MB
    TEMPLATES_AUTO_RELOAD=True
)

# Инициализация SocketIO
socketio = SocketIO(app, cors_allowed_origins="*")

# Регистрация Blueprint
from profile_handlers import profile_bp
app.register_blueprint(profile_bp)

# Вспомогательные функции
def get_db():
    conn = sqlite3.connect(app.config['DATABASE'])
    conn.row_factory = sqlite3.Row
    return conn

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

# Инициализация БД
def init_db():
    try:
        with app.app_context():
            db = get_db()
            cursor = db.cursor()
            
            # Создание таблиц
            cursor.executescript('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT UNIQUE NOT NULL,
                    password TEXT,
                    is_admin BOOLEAN DEFAULT 0
                );
                
                CREATE TABLE IF NOT EXISTS profile (
                    user_id INTEGER PRIMARY KEY,
                    name TEXT DEFAULT '',
                    phone TEXT DEFAULT '',
                    email TEXT DEFAULT '',
                    telegram TEXT DEFAULT '',
                    photo TEXT DEFAULT 'nkvtf.jpg'
                );
                
                CREATE TABLE IF NOT EXISTS students (
                    id INTEGER PRIMARY KEY,
                    username TEXT UNIQUE NOT NULL,
                    photo TEXT DEFAULT 'nkvtf.jpg',
                    name TEXT DEFAULT '',
                    class_is TEXT DEFAULT ''
                );
                
                CREATE TABLE IF NOT EXISTS achievements (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    image TEXT NOT NULL,
                    description TEXT NOT NULL,
                    is_student BOOLEAN DEFAULT 0,
                    student_id INTEGER
                );
                
                CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY,
                    sender TEXT NOT NULL,
                    text TEXT NOT NULL,
                    file TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                );
            ''')
            
            # Добавление администратора
            admin_password = generate_password_hash('12345679')
            cursor.execute('''
                INSERT OR IGNORE INTO users (username, password, is_admin)
                VALUES (?, ?, 1)
            ''', ('zavric228', admin_password))
            
            cursor.execute('INSERT OR IGNORE INTO profile (user_id) VALUES (1)')
            db.commit()
    except Exception as e:
        logging.error(f"Ошибка инициализации БД: {str(e)}")
        raise

# Маршруты
@app.route('/')
def index():
    try:
        db = get_db()
        profile = db.execute('SELECT * FROM profile WHERE user_id = 1').fetchone()
        achievements = db.execute('''
            SELECT * 
            FROM achievements 
            WHERE is_student = 0
        ''').fetchall()
        student_achievements = db.execute('''
            SELECT a.*, s.username as student_name 
            FROM achievements a
            LEFT JOIN students s ON a.student_id = s.id
            WHERE a.is_student = 1
        ''').fetchall()
    
        return render_template('index.html',
            profile=dict(profile) if profile else {},
            achievements=achievements,
            student_achievements=student_achievements,
            is_admin=session.get('is_admin', False),
            logged_in='user' in session
        )
    except Exception as e:
        logging.error(f"Ошибка в index(): {str(e)}")
        return render_template('error.html', error="Ошибка загрузки данных"), 500

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form.get('password', '')
        
        try:
            db = get_db()
            user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
            
            if user and check_password_hash(user['password'], password):
                session['user'] = user['username']
                session['is_admin'] = bool(user['is_admin'])
                return redirect(url_for('index'))
            
            flash('Неверные учетные данные', 'error')
        except Exception as e:
            logging.error(f"Ошибка входа: {str(e)}")
            flash('Ошибка сервера', 'error')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

# Обработчики ошибок
@app.errorhandler(403)
def forbidden(e):
    return render_template('error.html', error={'code': 403, 'description': 'Доступ запрещен'}), 403

@app.errorhandler(404)
def not_found(e):
    return render_template('error.html', error={'code': 404, 'description': 'Страница не найдена'}), 404

@app.errorhandler(500)
def internal_error(e):
    return render_template('error.html', error={'code': 500, 'description': 'Внутренняя ошибка сервера'}), 500

# WebSocket обработчики
@socketio.on('connect')
def handle_connect():
    if 'user' in session:
        emit('user_connected', {
            'username': session['user'],
            'is_admin': session.get('is_admin', False)
        })

@socketio.on('message')
def handle_message(data):
    if 'user' not in session:
        return abort(401)
    
    try:
        file_url = None
        if 'file' in data:
            filename = f"{session['user']}_{int(time.time())}.{data['file']['ext']}"
            filepath = os.path.join('static/chat_files', filename)
            with open(filepath, 'wb') as f:
                f.write(data['file']['data'])
            file_url = f"/static/chat_files/{filename}"

        db = get_db()
        db.execute('''
            INSERT INTO messages (sender, text, file)
            VALUES (?, ?, ?)
        ''', (session['user'], data['text'], file_url))
        db.commit()

        emit('new_message', {
            'text': data['text'],
            'file': file_url,
            'sender': session['user'],
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
        }, broadcast=True)
    except Exception as e:
        logging.error(f"Ошибка обработки сообщения: {str(e)}")

# Запуск приложения
if __name__ == '__main__':
    # Создание директорий
    os.makedirs(app.config['UPLOAD_FOLDER_PROFILE'], exist_ok=True)
    os.makedirs(app.config['UPLOAD_FOLDER_ACHIEVEMENTS'], exist_ok=True)
    os.makedirs(app.config['UPLOAD_FOLDER_STUDENTS_ACHIEVEMENTS'], exist_ok=True)
    os.makedirs('static/chat_files', exist_ok=True)
    
    # Инициализация БД
    if not os.path.exists(app.config['DATABASE']):
        init_db()
    
    # Запуск
    socketio.run(app, 
        host='0.0.0.0', 
        port=5000, 
        debug=True, 
        allow_unsafe_werkzeug=True
    )

chat_handlers.py:

# Импорт библиотек
from flask import Blueprint, session, request, jsonify
from flask_socketio import emit
import os
import sqlite3
import time
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash

# Инициализация Blueprint
chat_bp = Blueprint('chat', __name__)

def get_db():
    conn = sqlite3.connect(current_app.config['DATABASE'])
    conn.row_factory = sqlite3.Row
    return conn

# WebSocket обработчики
def handle_connect():
    if 'user' in session:
        emit('user_connected', {
            'username': session['user']['username'],
            'is_admin': session['user']['is_admin']
        })

def handle_message(data):
    if 'user' not in session:
        return
    
    # Проверка прав (админ может отвечать как 'tutor')
    sender = 'tutor' if session['user']['is_admin'] else session['user']['username']
    
    file_url = None
    if 'file' in data:
        try:
            ext = data['file']['ext'].lower()
            if ext not in {'png', 'jpg', 'jpeg'}:
                raise ValueError('Invalid file type')
                
            filename = f"{sender}_{int(time.time())}.{ext}"
            filepath = os.path.join('static/chat_files', filename)
            
            with open(filepath, 'wb') as f:
                f.write(data['file']['data'])
            
            file_url = f"/static/chat_files/{filename}"
        except Exception as e:
            print(f"Ошибка загрузки файла: {str(e)}")
            return

    with get_db() as db:
        db.execute('''
            INSERT INTO messages 
            (sender, text, file) 
            VALUES (?, ?, ?)
        ''', (sender, data['text'], file_url))
        db.commit()
    
    emit('new_message', {
        'text': data['text'],
        'file': file_url,
        'sender': sender,
        'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
    }, broadcast=True)
# HTTP маршруты чата
@chat_bp.route('/admin_chats')
def admin_chats():
    if not session.get('user') or not session['user']['is_admin']:
        abort(403)
    
    with get_db() as db:
        messages = db.execute('''
            SELECT m.*, s.photo as student_photo 
            FROM messages m
            LEFT JOIN students s ON m.sender = s.username
            ORDER BY m.timestamp DESC
        ''').fetchall()
    
    return jsonify([dict(msg) for msg in messages])

# Регистрация обработчиков WebSocket
def register_socket_handlers(socketio):
    socketio.on_event('connect', handle_connect)
    socketio.on_event('message', handle_message)

profile_handlers.py:
# Импорт библиотек
from flask import Blueprint, session, request, jsonify
from flask_socketio import emit
import os
import sqlite3
import time
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash

# Инициализация Blueprint
chat_bp = Blueprint('chat', __name__)

def get_db():
    conn = sqlite3.connect(current_app.config['DATABASE'])
    conn.row_factory = sqlite3.Row
    return conn

# WebSocket обработчики
def handle_connect():
    if 'user' in session:
        emit('user_connected', {
            'username': session['user']['username'],
            'is_admin': session['user']['is_admin']
        })

def handle_message(data):
    if 'user' not in session:
        return
    
    # Проверка прав (админ может отвечать как 'tutor')
    sender = 'tutor' if session['user']['is_admin'] else session['user']['username']
    
    file_url = None
    if 'file' in data:
        try:
            ext = data['file']['ext'].lower()
            if ext not in {'png', 'jpg', 'jpeg'}:
                raise ValueError('Invalid file type')
                
            filename = f"{sender}_{int(time.time())}.{ext}"
            filepath = os.path.join('static/chat_files', filename)
            
            with open(filepath, 'wb') as f:
                f.write(data['file']['data'])
            
            file_url = f"/static/chat_files/{filename}"
        except Exception as e:
            print(f"Ошибка загрузки файла: {str(e)}")
            return

    with get_db() as db:
        db.execute('''
            INSERT INTO messages 
            (sender, text, file) 
            VALUES (?, ?, ?)
        ''', (sender, data['text'], file_url))
        db.commit()
    
    emit('new_message', {
        'text': data['text'],
        'file': file_url,
        'sender': sender,
        'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
    }, broadcast=True)
# HTTP маршруты чата
@chat_bp.route('/admin_chats')
def admin_chats():
    if not session.get('user') or not session['user']['is_admin']:
        abort(403)
    
    with get_db() as db:
        messages = db.execute('''
            SELECT m.*, s.photo as student_photo 
            FROM messages m
            LEFT JOIN students s ON m.sender = s.username
            ORDER BY m.timestamp DESC
        ''').fetchall()
    
    return jsonify([dict(msg) for msg in messages])

# Регистрация обработчиков WebSocket
def register_socket_handlers(socketio):
    socketio.on_event('connect', handle_connect)
    socketio.on_event('message', handle_message)

schema.sql:
BEGIN TRANSACTION;

-- Таблица пользователей
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    password TEXT,
    is_admin BOOLEAN DEFAULT 0
);

-- Профиль преподавателя
CREATE TABLE IF NOT EXISTS profile (
    user_id INTEGER PRIMARY KEY,
    name TEXT DEFAULT '',
    phone TEXT DEFAULT '',
    email TEXT DEFAULT '',
    telegram TEXT DEFAULT '',
    photo TEXT DEFAULT 'nkvtf.jpg'
);

-- Ученики
CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    photo TEXT DEFAULT 'nkvtf.jpg',
    name TEXT DEFAULT '',
);

-- Достижения
CREATE TABLE IF NOT EXISTS achievements (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    image TEXT NOT NULL,
    description TEXT NOT NULL,
    is_student BOOLEAN DEFAULT 0,
    student_id INTEGER
);

-- Сообщения чата
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY,
    sender TEXT NOT NULL,
    text TEXT NOT NULL,
    file TEXT,
    student_id INTEGER REFERENCES students(id),
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Данные администратора (логин: zavric228, пароль: 12345679)
INSERT OR IGNORE INTO users (username, password, is_admin) 
VALUES (
    'zavric228', 
    'pbkdf2:sha256:260000$XcD9aJ9H$8e4f1d3e7f0a2b5c6d8e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1', 
    1
);

-- Пустой профиль преподавателя
INSERT OR IGNORE INTO profile (user_id) VALUES (1);

COMMIT;

static/css/dark.css:
/* Темная тема */
:root {
  --primary-color: #2c3e50;
  --secondary-color: #34495e;
  --text-color: #ecf0f1;
  --bg-color: #121212;
  --border-color: #444;
  --card-bg: #1e1e1e;
  --error-color: #7f1d1d;
}

/* Специфичные элементы для темной темы */
body {
  background-color: var(--bg-color);
  color: var(--text-color);
}

.tab-btn {
  background-color: var(--secondary-color);
  color: var(--text-color);
}

.tab-btn.active {
  background-color: var(--primary-color);
}

.achievement-card {
  background-color: var(--card-bg);
  border: 1px solid var(--border-color);
}

input,
textarea,
select {
  background-color: #333 !important;
  color: var(--text-color) !important;
  border-color: var(--border-color) !important;
}

.search-box {
  background-color: var(--card-bg);
}

#search-results {
  background-color: var(--card-bg);
  border: 1px solid var(--border-color);
}

.message {
  background-color: #2d2d2d;
}

.my-message {
  background-color: var(--primary-color);
}

static/css/light.css:
/* Светлая тема */
:root {
  --primary-color: #3498db;
  --secondary-color: #2980b9;
  --text-color: #333;
  --bg-color: #f9f9f9;
  --border-color: #ddd;
  --card-bg: #fff;
  --error-color: #e74c3c;
}

/* Специфичные элементы для светлой темы */
.tab-btn {
  background-color: #eee;
  color: #333;
}

.tab-btn.active {
  background-color: var(--primary-color);
  color: white;
}

.achievement-card {
  background-color: var(--card-bg);
  border: 1px solid var(--border-color);
}

.search-box {
  background-color: white;
}

#search-results {
  background-color: white;
  border: 1px solid var(--border-color);
}

static/css/shared.css:
/* Базовые стили для всех тем */
:root {
  --primary-color: #3498db;
  --secondary-color: #2980b9;
  --text-color: #333;
  --bg-color: #f9f9f9;
  --border-color: #ddd;
  --card-bg: #fff;
  --error-color: #e74c3c;
  --success-color: #2ecc71;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 0;
  background-color: var(--bg-color);
  color: var(--text-color);
  line-height: 1.6;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* Шапка */
header {
  background-color: var(--primary-color);
  padding: 15px 0;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.header-controls {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 15px;
  padding: 0 20px;
}

/* Кнопки */
.btn {
  padding: 8px 15px;
  background: var(--primary-color);
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s;
}

.btn:hover {
  background: var(--secondary-color);
}

/* Формы */
.auth-container {
  max-width: 400px;
  margin: 50px auto;
  padding: 20px;
  background: var(--card-bg);
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 8px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background-color: var(--card-bg);
  color: var(--text-color);
}

/* Профили */
.profile-section {
  display: flex;
  gap: 30px;
  margin-bottom: 30px;
}

.profile-photo {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  overflow: hidden;
  border: 2px solid var(--border-color);
}

/* Чат */
.chat-container {
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 15px;
  background: var(--card-bg);
  height: 500px;
  display: flex;
  flex-direction: column;
}

#chat-messages {
  flex-grow: 1;
  overflow-y: auto;
  margin-bottom: 15px;
}

.message {
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 5px;
  background: #f0f0f0;
  max-width: 70%;
}

.my-message {
  margin-left: auto;
  background: var(--primary-color);
  color: white;
}

.message-input {
  display: flex;
  gap: 10px;
}

.profile-photo img {
    width: 20px;
    height: 20px;
    object-fit: cover;
    border-radius: 50%;
}

.achievement-card img {
    width: 100%;
    max-width: 300px;
    height: auto;
    object-fit: cover;
    border-radius: 8px;
}

.message-input input {
  flex-grow: 1;
  padding: 8px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
}

/* Адаптивность */
@media (max-width: 768px) {
  .profile-section {
    flex-direction: column;
  }
  
  .profile-photo {
    width: 100px;
    height: 100px;
    margin: 0 auto;
  }
  
  .message {
    max-width: 90%;
  }
}

templates/admin_panel.html:
{% extends "base.html" %}

{% block content %}
<div class="admin-container">
    <h1>Панель администратора</h1>
    
    <div class="search-section">
        <input type="text" id="student-search" placeholder="Поиск ученика..." class="search-input">
        <div id="search-results" class="search-results"></div>
    </div>

    <div class="chat-list">
        {% for message in messages %}
        <div class="chat-item" onclick="location.href='{{ url_for('profile.student_profile') }}?username={{ message.sender }}'">
            <img src="{{ url_for('static', filename='img/students/' + (message.student_photo if message.student_photo else 'nkvtf.jpg')) }}" 
                 class="student-photo" 
                 onerror="this.src='{{ url_for('static', filename='img/students/nkvtf.jpg') }}'">
            <div class="message-content">
                <h3>{{ message.sender }}</h3>
                <p>{{ message.text|truncate(50) }}</p>
                <span class="message-time">{{ message.timestamp }}</span>
            </div>
        </div>
        {% endfor %}
    </div>
</div>

<style>
.admin-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.search-section {
    margin-bottom: 30px;
    position: relative;
}

.search-input {
    width: 100%;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background-color: var(--card-bg);
    color: var(--text-color);
}

.search-results {
    position: absolute;
    width: 100%;
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-top: none;
    z-index: 100;
    max-height: 300px;
    overflow-y: auto;
}

.chat-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.chat-item {
    display: flex;
    gap: 15px;
    padding: 15px;
    background: var(--card-bg);
    border-radius: 8px;
    cursor: pointer;
    transition: transform 0.2s;
}

.chat-item:hover {
    transform: translateX(5px);
}

.student-photo {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
}

.message-content {
    flex-grow: 1;
}

.message-content h3 {
    margin: 0 0 5px 0;
}

.message-time {
    font-size: 0.8em;
    color: #777;
}
</style>

<script>
document.getElementById('student-search').addEventListener('input', function(e) {
    const query = e.target.value.trim();
    const resultsDiv = document.getElementById('search-results');
    
    if (query.length < 2) {
        resultsDiv.innerHTML = '';
        return;
    }

    fetch(`/profile/api/students?q=${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(data => {
            resultsDiv.innerHTML = data.map(student => `
                <div class="search-result" 
                     onclick="location.href='/profile/student_profile?username=${student.username}'">
                    ${student.username} ${student.name ? `(${student.name})` : ''}
                </div>
            `).join('');
        });
});
</script>
{% endblock %}

templates/base.html:
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Репетиторская система{% endblock %}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/shared.css') }}">
    <link id="theme-style" rel="stylesheet" href="{{ url_for('static', filename='css/light.css') }}">
    <script src="https://cdn.socket.io/4.7.4/socket.io.min.js"></script>
</head>
<body>
    <header>
        <div class="header-controls">
            <button id="theme-toggle">🌓</button>
            {% if 'user' in session %}
                {% if session.is_admin %}
                    <a href="{{ url_for('profile.admin_panel') }}" class="btn">Админ-панель</a>
                {% else %}
                    <a href="{{ url_for('profile.student_profile') }}" class="profile-btn">
                        <img src="{{ url_for('static', filename='img/students/' + (student.photo if student else 'nkvtf.jpg')) }}" 
                             alt="Профиль"
                             onerror="this.src='{{ url_for('static', filename='img/students/nkvtf.jpg') }}'">
                    </a>
                {% endif %}
                <a href="{{ url_for('logout') }}" class="btn">🚪 Выйти</a>
            {% else %}
                <div class="guest-notice">Гостевой доступ</div>
                <a href="{{ url_for('login') }}" class="btn">🔑 Войти</a>
            {% endif %}
        </div>
    </header>

    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="flash-{{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        {% block content %}{% endblock %}
    </div>

    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

templates/error.html:
{% extends "base.html" %}

{% block content %}
<div class="error-page">
    <div class="error-header">
        <h2>⚠️ Ошибка {{ error.code if error.code else '500' }}</h2>
    </div>
    <div class="error-body">
        <p class="error-description">
            {% if error.description %}
                {{ error.description }}
            {% else %}
                Произошла непредвиденная ошибка
            {% endif %}
        </p>
        <div class="error-actions">
            <a href="{{ url_for('index') }}" class="btn">На главную</a>
            <button onclick="history.back()" class="btn">Назад</button>
        </div>
    </div>
</div>

<style>
.error-page {
    max-width: 600px;
    margin: 50px auto;
    padding: 30px;
    background-color: var(--card-bg);
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 0 15px rgba(0,0,0,0.1);
}

.error-header h2 {
    color: var(--error-color);
    margin-bottom: 20px;
}

.error-actions {
    margin-top: 25px;
    display: flex;
    gap: 15px;
    justify-content: center;
}
</style>
{% endblock %}

templates/index.html:
{% extends "base.html" %}

{% block content %}
<div class="main-content">
    <h1>Профиль преподавателя</h1>
    
    <div class="tabs">
        <button class="tab-btn active" data-tab="personal">Личная информация</button>
        <button class="tab-btn" data-tab="achievements">Мои достижения</button>
        <button class="tab-btn" data-tab="students">Достижения учеников</button>
    </div>
    
    <div class="tab-content active" id="personal">
        {% include 'sections/personal.html' %}
    </div>
    
    <div class="tab-content" id="achievements">
        {% include 'sections/achievements.html' %}
    </div>
    
    
    <div class="tab-content" id="students">
        {% include 'sections/students.html' %}
    </div>
    
</div>

<script>
document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        // Удаление активного класса у всех кнопок и контента
        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
        
        // Активация выбранной вкладки
        this.classList.add('active');
        document.getElementById(this.dataset.tab).classList.add('active');
    });
});
</script>

<style>
.main-content {
    padding: 20px;
    background-color: var(--card-bg);
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.tabs {
    display: flex;
    gap: 15px;
    margin-bottom: 25px;
    border-bottom: 2px solid var(--border-color);
}

.tab-btn {
    padding: 12px 20px;
    border: none;
    border-radius: 5px 5px 0 0;
    cursor: pointer;
    transition: background 0.3s;
}

.tab-btn.active {
    background: var(--primary-color);
    color: white;
}

.tab-content {
    display: none;
    padding: 20px;
    border: 1px solid var(--border-color);
    border-radius: 0 8px 8px 8px;
}

.tab-content.active {
    display: block;
}
</style>
{% endblock %}

templates/login.html:
{% extends "base.html" %}

{% block content %}
<div class="auth-container">
    <h2>Вход в систему</h2>
    
    <form method="POST" action="{{ url_for('profile.login') }}">
        <div class="form-group">
            <input type="text" 
                   name="username" 
                   placeholder="Введите ваш логин" 
                   required
                   oninput="togglePasswordField(this)">
        </div>

        <!-- Поле пароля (только для администратора) -->
        <div id="password-field" class="form-group" style="display: none;">
            <input type="password" 
                   name="password" 
                   placeholder="Пароль администратора">
        </div>

        <button type="submit" class="btn">Продолжить</button>
    </form>
</div>

<script>
function togglePasswordField(input) {
    const passwordField = document.getElementById('password-field');
    passwordField.style.display = (input.value.toLowerCase() === 'zavric228') ? 'block' : 'none';
}
</script>

<style>
.auth-container {
    max-width: 400px;
    margin: 50px auto;
    padding: 20px;
    background: var(--card-bg);
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    text-align: center;
}

.form-group {
    margin-bottom: 15px;
}

.form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

.btn {
    background: var(--primary-color);
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}
</style>
{% endblock %}

templates/sections/achievements.html:
<div class="achievements-section">
    <h2>Мои достижения</h2>
    
    {% if is_admin %}
    <form method="POST" action="{{ url_for('profile.add_achievement') }}" enctype="multipart/form-data" class="achievement-form">
        <input type="hidden" name="is_student" value="0">  <!-- is_student=0 для репетитора -->
        <div class="form-row">
            <label>Изображение:</label>
            <input type="file" name="image" accept="image/*" required>
        </div>
        <div class="form-row">
            <label>Описание:</label>
            <textarea name="description" required></textarea>
        </div>
        <button type="submit" class="btn">Добавить достижение</button>
    </form>
    {% endif %}

    <div class="achievements-grid">
        {% for achievement in achievements %}
        <div class="achievement-card">
            <img src="{{ url_for('static', filename='img/achievements/' + achievement.image) }}" 
                 alt="Достижение"
                 onerror="this.src='{{ url_for('static', filename='img/achievements/nkvtf.jpg') }}'">
            <div class="achievement-info">
                <p>{{ achievement.description }}</p>  <!-- Убрано отображение имени ученика -->
                {% if is_admin %}
                <form method="POST" action="{{ url_for('profile.delete_achievement', id=achievement.id) }}">
                    <button type="submit" class="btn delete-btn">Удалить</button>
                </form>
                {% endif %}
            </div>
        </div>
        {% else %}
        <p class="no-achievements">Пока нет достижений</p>
        {% endfor %}
    </div>
</div>

<style>
.achievements-section {
    padding: 20px;
}

.achievement-form {
    margin-bottom: 30px;
    background: var(--card-bg);
    padding: 20px;
    border-radius: 8px;
}

.achievements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
}

.achievement-card {
    background: var(--card-bg);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.achievement-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.achievement-info {
    padding: 15px;
}

.delete-btn {
    background-color: var(--error-color);
    margin-top: 10px;
}

.no-achievements {
    text-align: center;
    grid-column: 1 / -1;
    color: #777;
}
</style>

templates/sections/personal.html:
<div class="personal-section">
    <div class="profile-header">
        <div class="profile-photo">
            <img src="{{ url_for('static', filename='img/profile/' + profile.photo) }}" 
                 alt="Фото преподавателя"
                 onerror="this.onerror=null; this.src='{{ url_for('static', filename='img/profile/nkvtf.jpg') }}'">
        </div>
        <div class="profile-info">
            <h2>{{ profile.name }}</h2>
            <p><strong>Телефон:</strong> {{ profile.phone if profile.phone else 'не указан' }}</p>
            <p><strong>Email:</strong> {{ profile.email if profile.email else 'не указан' }}</p>
            <p><strong>Telegram:</strong> {{ profile.telegram if profile.telegram else 'не указан' }}</p>
        </div>
    </div>

    {% if session.is_admin %}
    <form class="edit-form" method="POST" action="{{ url_for('profile.update_profile') }}" enctype="multipart/form-data">
        <div class="form-row">
            <label for="name">Имя:</label>
            <input type="text" id="name" name="name" value="{{ profile.name }}" required>
        </div>
        <div class="form-row">
            <label for="phone">Телефон:</label>
            <input type="tel" id="phone" name="phone" value="{{ profile.phone }}">
        </div>
        <div class="form-row">
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" value="{{ profile.email }}">
        </div>
        <div class="form-row">
            <label for="telegram">Telegram:</label>
            <input type="text" id="telegram" name="telegram" value="{{ profile.telegram }}">
        </div>
        <div class="form-row">
            <label for="photo">Фото:</label>
            <input type="file" id="photo" name="photo" accept="image/*">
        </div>
        <button type="submit" class="btn">Сохранить изменения</button>
    </form>
    {% endif %}

    <style>
    .personal-section {
        padding: 20px;
        background-color: var(--card-bg);
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .profile-header {
        display: flex;
        gap: 40px;
        align-items: center;
        margin-bottom: 30px;
    }
    .profile-photo {
        flex-shrink: 0;
        width: 200px;
        height: 200px;
        border-radius: 50%;
        overflow: hidden;
        border: 3px solid var(--primary-color);
    }
    .profile-photo img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    .profile-info {
        flex-grow: 1;
    }
    .profile-info p {
        margin: 10px 0;
        font-size: 1.1em;
    }
    .edit-form {
        max-width: 600px;
        margin-top: 30px;
        padding: 20px;
        background-color: var(--bg-color);
        border-radius: 8px;
    }
    .form-row {
        margin-bottom: 15px;
    }
    .form-row label {
        display: inline-block;
        width: 120px;
        font-weight: bold;
    }
    @media (max-width: 768px) {
        .profile-header {
            flex-direction: column;
            text-align: center;
        }
        .profile-photo {
            width: 150px;
            height: 150px;
        }
    }
    </style>
</div>

templates/sections/student_profil.html:
<div class="student-profile-section">
    <div class="profile-header">
        <div class="profile-photo">
            <img src="{{ url_for('static', filename='img/students/' + student.photo) }}" 
                 alt="Фото ученика"
                 onerror="this.onerror=null; this.src='{{ url_for('static', filename='img/students/nkvtf.jpg') }}'">
        </div>
        <div class="profile-info">
            <h2>{{ student.name if student.name else student.username }}</h2>
            <p><strong>Уровень:</strong> {{ student.class_is if student.class_is else 'не указан' }}</p>
            {% if session.user == student.username or session.is_admin %}
            <button class="btn" onclick="document.getElementById('edit-modal').style.display='block'">
                Редактировать профиль
            </button>
            {% endif %}
        </div>
    </div>

    <!-- Секция достижений -->
    <div class="achievements-section">
        <h3>Мои достижения</h3>
        <div class="achievements-grid">
            {% for achievement in my_achievements %}
            <div class="achievement-card">
                <img src="{{ url_for('static', filename='img/students_achievements/' + achievement.image) }}" 
                     alt="Достижение"
                     onerror="this.src='{{ url_for('static', filename='img/students_achievements/nkvtf.jpg') }}'">
                <div class="achievement-info">
                    <p>{{ achievement.description }}</p>
                </div>
            </div>
            {% else %}
            <p class="no-achievements">Пока нет достижений</p>
            {% endfor %}
        </div>
    </div>

    <!-- Секция чата -->
    <div class="chat-section">
        <h3>Чат с преподавателем</h3>
        <div class="chat-container">
            <div id="chat-messages">
                {% for message in messages %}
                <div class="message {% if message.sender == session.user %}my-message{% endif %}">
                    <p>{{ message.text }}</p>
                    {% if message.file %}
                    <img src="{{ message.file }}" class="chat-image">
                    {% endif %}
                    <span class="message-time">{{ message.timestamp }}</span>
                </div>
                {% endfor %}
            </div>
            <form id="chat-form" class="message-input">
                <input type="text" id="message-input" placeholder="Введите сообщение">
                <input type="file" id="file-input" accept="image/*">
                <button type="submit" class="btn">Отправить</button>
            </form>
        </div>
    </div>

    <!-- Модальное окно редактирования -->
    <div id="edit-modal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="document.getElementById('edit-modal').style.display='none'">&times;</span>
            <form method="POST" action="{{ url_for('profile.update_student_profile') }}" enctype="multipart/form-data">
                <input type="hidden" name="student_id" value="{{ student.id }}">
                <div class="form-row">
                    <label>Имя:</label>
                    <input type="text" name="name" value="{{ student.name }}">
                </div>
                <div class="form-row">
                    <label>Уровень:</label>
                    <input type="text" name="class_is" value="{{ student.class_is }}">
                </div>
                <div class="form-row">
                    <label>Фото:</label>
                    <input type="file" name="photo" accept="image/*">
                </div>
                <button type="submit" class="btn">Сохранить</button>
            </form>
        </div>
    </div>
</div>

<style>
/* Стили для изображений */
.profile-photo img {
    width: 150px;
    height: 150px;
    object-fit: cover;
    border-radius: 50%;
    border: 3px solid var(--primary-color);
}

.achievement-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 8px;
}

.chat-image {
    max-width: 300px;
    height: auto;
    margin-top: 10px;
    border-radius: 8px;
}

/* Остальные стили */
.student-profile-section {
    padding: 20px;
}

.profile-header {
    display: flex;
    gap: 30px;
    align-items: center;
    margin-bottom: 30px;
}

.achievements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.chat-container {
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 15px;
    background: var(--card-bg);
    height: 400px;
    overflow-y: auto;
}

.message {
    background: #f0f0f0;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
    max-width: 70%;
}

.my-message {
    margin-left: auto;
    background: var(--primary-color);
    color: white;
}
</style>

templates/sections/students.html:
<div class="students-section">
    <h2>Достижения учеников</h2>
    
    {% if is_admin %}
    <form method="POST" action="{{ url_for('profile.add_achievement') }}" enctype="multipart/form-data" class="achievement-form">
        <input type="hidden" name="is_student" value="1">
        <div class="form-row">
            <label>Ученик:</label>
            <input type="text" 
                   name="student_username" 
                   placeholder="Введите логин ученика" 
                   required>
        </div>
        <div class="form-row">
            <label>Изображение:</label>
            <input type="file" name="image" accept="image/*" required>
        </div>
        <div class="form-row">
            <label>Описание:</label>
            <textarea name="description" required></textarea>
        </div>
        <button type="submit" class="btn">Добавить достижение</button>
    </form>
    {% endif %}

    <div class="achievements-grid">
        {% for achievement in student_achievements %}
        <div class="achievement-card">
            <img src="{{ url_for('static', filename='img/students_achievements/' + achievement.image) }}" 
                 alt="Достижение ученика"
                 onerror="this.src='{{ url_for('static', filename='img/students_achievements/nkvtf.jpg') }}'">
            <div class="achievement-info">
                <h3>{{ achievement.student_name }}</h3>
                <p>{{ achievement.description }}</p>
                {% if is_admin %}
                <form method="POST" action="{{ url_for('profile.delete_achievement', id=achievement.id) }}">
                    <button type="submit" class="btn delete-btn">Удалить</button>
                </form>
                {% endif %}
            </div>
        </div>
        {% else %}
        <p class="no-achievements">Нет достижений учеников</p>
        {% endfor %}
    </div>
</div>

<style>
.students-section {
    padding: 20px;
}

.achievement-form {
    margin-bottom: 30px;
    background: var(--card-bg);
    padding: 20px;
    border-radius: 8px;
}

.achievements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 25px;
}

.achievement-card {
    background: var(--card-bg);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.achievement-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.achievement-info {
    padding: 15px;
}

.achievement-info h3 {
    margin-top: 0;
    color: var(--primary-color);
}

.delete-btn {
    background-color: var(--error-color);
    margin-top: 10px;
}

.no-achievements {
    text-align: center;
    grid-column: 1 / -1;
    color: #777;
}
</style>